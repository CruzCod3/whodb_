package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"github.com/clidey/whodb/core/graph/model"
	"github.com/clidey/whodb/core/src"
	"github.com/clidey/whodb/core/src/auth"
	"github.com/clidey/whodb/core/src/engine"
)

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, credentails model.LoginCredentials) (*model.LoginResponse, error) {
	return auth.Login(ctx, &credentails)
}

// CreateStorageUnit is the resolver for the CreateStorageUnit field.
func (r *mutationResolver) CreateStorageUnit(ctx context.Context, typeArg model.DatabaseType) (*model.StorageUnit, error) {
	panic(fmt.Errorf("not implemented: Schema - Schema"))
}

// StorageUnit is the resolver for the StorageUnit field.
func (r *queryResolver) StorageUnit(ctx context.Context, typeArg model.DatabaseType) ([]*model.StorageUnit, error) {
	config := engine.NewPluginConfig(auth.GetCredentials(ctx))
	units, err := src.MainEngine.Choose(engine.DatabaseType(typeArg)).GetStorageUnits(config)
	if err != nil {
		return nil, err
	}
	storageUnits := []*model.StorageUnit{}
	for _, unit := range units {
		attributes := []*model.Record{}
		for _, attribute := range unit.Attributes {
			attributes = append(attributes, &model.Record{
				Key:   attribute.Key,
				Value: attribute.Value,
			})
		}
		storageUnits = append(storageUnits, &model.StorageUnit{
			Name:       unit.Name,
			Attributes: attributes,
		})
	}
	return storageUnits, nil
}

// Row is the resolver for the Row field.
func (r *queryResolver) Row(ctx context.Context, typeArg model.DatabaseType, storageUnit string, pageSize int, pageOffset int) (*model.RowsResult, error) {
	config := engine.NewPluginConfig(auth.GetCredentials(ctx))
	rowsResult, err := src.MainEngine.Choose(engine.DatabaseType(typeArg)).GetRows(config, storageUnit, pageSize, pageOffset)
	if err != nil {
		return nil, err
	}
	columns := []*model.Column{}
	for _, column := range rowsResult.Columns {
		columns = append(columns, &model.Column{
			Type: column.Type,
			Name: column.Name,
		})
	}
	return &model.RowsResult{
		Columns: columns,
		Rows:    rowsResult.Rows,
	}, nil
}

// Column is the resolver for the Column field.
func (r *queryResolver) Column(ctx context.Context, typeArg model.DatabaseType, storageUnit string, row string) ([]string, error) {
	panic(fmt.Errorf("not implemented: Column - Column"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
